Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

 

Example 1:

Input: nums = [3,2,3]
Output: 3
Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2
 

Constraints:

n == nums.length
1 <= n <= 5 * 104
-109 <= nums[i] <= 109


-----------------------------------------------------------
Solution:

class Solution {
    public int majorityElement(int[] nums) {
        int count=0;
        Integer max=0;
        int result=0;
        HashMap<Integer,Integer> map = new HashMap<Integer, Integer>();
        for(int i=0;i<nums.length;i++){
            if(map.containsKey(nums[i])){
                count=map.get(nums[i]) +1;
                map.put(nums[i],count);
            }

        else map.put(nums[i],1);

        }
        for(Map.Entry<Integer,Integer> entry:map.entrySet()){
            if(max<entry.getValue()){
                max=entry.getValue();
            }
        }
        for(Map.Entry entry:map.entrySet()){
            if(max==entry.getValue()){
                result = (int)entry.getKey();
            }
        }
        return result;

    }
}
