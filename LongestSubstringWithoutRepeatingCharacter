iven a string s, find the length of the longest 
substring
 without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.




---------------------------------------------------------------------------
Solution:
class Solution {
    public int lengthOfLongestSubstring(String s) {
       int count=0;
         int max=0;
        char[] c =s.toCharArray();
        Character[] ch= new Character[c.length];
        for(int i=0;i<c.length;i++){
            ch[i]=c[i];
        }
        Map<Character, Integer> map = new HashMap();
        Set set= new LinkedHashSet();
        for(int i=0; i<ch.length;i++){
            if(set.add(ch[i])){
                map.put(ch[i],i);
                count++;
                                      }
            else {
                  i=map.get(ch[i]);
                set.clear();
            
                count=0;
            }
             max=Math.max(count, max);
                
        }
        return max;
    } 
}
