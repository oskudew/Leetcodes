Write an algorithm to determine if a number n is happy.

A happy number is a number defined by the following process:

Starting with any positive integer, replace the number by the sum of the squares of its digits.
Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.
Those numbers for which this process ends in 1 are happy.
Return true if n is a happy number, and false if not.

 

Example 1:

Input: n = 19
Output: true
Explanation:
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1
Example 2:

Input: n = 2
Output: false
 

Constraints:

1 <= n <= 231 - 1

Solution:

class Solution {
    public boolean isHappy(int n) {
        int p=n;
        int k=0, sum=0,s=0;
        HashSet set= new HashSet();
        while(sum>=0){
        while(p>0){
           k=p%10;
            sum=sum+(int)Math.pow(k,2);
            p=p/10;
           
        }
             if(sum==1) return true;
            if(!set.add(sum)) return false;
            p=sum;
            sum=0;
        }
        return false;
    }
}
