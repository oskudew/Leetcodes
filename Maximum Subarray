Given an integer array nums, find the 
subarray
 which has the largest sum and return its sum.

 

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Example 2:

Input: nums = [1]
Output: 1
Example 3:

Input: nums = [5,4,-1,7,8]
Output: 23
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104
 

Follow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.


Solution:

class Solution {
    public int maxSubArray(int[] arr) {
          int[]sum=new int[arr.length];
        sum[0]=arr[0];
        int maxsum=Integer.MIN_VALUE;
        for(int m=1;m<arr.length;m++){
            //sum[m]=Math.max (  sum[m-1]+ arr[m],arr[m] );
            if(sum[m-1]+arr[m]<arr[m]){
                sum[m]=arr[m];
            }
            else sum[m]=sum[m-1]+arr[m];

        }

        for(int j=0;j<sum.length;j++){
                if(sum[j]>maxsum)
                    maxsum=sum[j];
        }
        return maxsum;
    }
}
